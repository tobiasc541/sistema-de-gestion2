"use client";
export const dynamic = "force-dynamic";
export const fetchCache = "force-no-store";

import React, { useEffect, useMemo, useState } from "react";
import { supabase, hasSupabase } from "../../lib/supabaseClient";

type Ticket = {
  id: string;
  date_iso: string;
  client_id: string;
  client_number: number;
  client_name: string;
  action: string;
  status: "En cola" | "Aceptado";
  accepted_at?: string | null;
  accepted_by?: string | null;
  counter_name?: string | null;
};

const pad2 = (n: number) => String(n).padStart(2, "0");

function hourRange(base = new Date()) {
  const s = new Date(base);
  s.setMinutes(0, 0, 0);
  const e = new Date(s);
  e.setMinutes(59, 59, 999);
  return { startISO: s.toISOString(), endISO: e.toISOString() };
}

function speak(text: string) {
  try {
    if (typeof window === "undefined" || !("speechSynthesis" in window)) return;
    const u = new SpeechSynthesisUtterance(text);
    u.lang = "es-AR";
    u.rate = 1;
    u.pitch = 1;
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(u);
  } catch {}
}

export default function TVPage() {
  const [pending, setPending] = useState<Ticket[]>([]);
  const [accepted, setAccepted] = useState<Ticket[]>([]);
  const [now, setNow] = useState(new Date());
  const { startISO, endISO } = useMemo(() => hourRange(now), [now.toISOString()]);

  async function refresh() {
    if (!hasSupabase) return;
    const { data, error } = await supabase
      .from("tickets")
      .select("*")
      .gte("date_iso", startISO)
      .lte("date_iso", endISO)
      .order("date_iso", { ascending: true });

    if (error) return;

    const all = (data ?? []) as Ticket[];
    setPending(all.filter((t) => t.status === "En cola"));
    setAccepted(all.filter((t) => t.status === "Aceptado"));
  }

  useEffect(() => {
    refresh();
    const poll = setInterval(refresh, 4000);            // refresco cada 4s
    const tick = setInterval(() => setNow(new Date()), 60000);
    return () => {
      clearInterval(poll);
      clearInterval(tick);
    };
  }, [startISO, endISO]);

  const lastAccepted = accepted[accepted.length - 1];
  useEffect(() => {
    if (!lastAccepted) return;
    const name = lastAccepted.client_name || "Cliente";
    const caja = lastAccepted.counter_name || "Caja 1";
    speak(`${name}, puede pasar a ${caja}`);
  }, [lastAccepted?.id]);

  return (
    <div className="min-h-screen bg-black text-white p-10">
      <div className="max-w-6xl mx-auto">
        <div className="flex items-baseline justify-between">
          <h1 className="text-4xl font-extrabold tracking-tight">TURNOS</h1>
          <div className="text-xl text-gray-400">
            {`${pad2(new Date().getHours())}:${pad2(new Date().getMinutes())}`}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mt-8">
          <section>
            <h2 className="text-2xl font-bold mb-3 text-gray-300">En cola</h2>
            <div className="space-y-3">
              {pending.length === 0 && (
                <div className="rounded-xl border border-gray-700 p-4 text-gray-400">
                  Sin turnos en esta hora.
                </div>
              )}
              {pending.map((t) => (
                <div key={t.id} className="rounded-xl border border-gray-700 p-5">
                  <div className="text-2xl font-bold">{t.client_name}</div>
                  <div className="text-sm text-gray-400">{t.action}</div>
                </div>
              ))}
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-bold mb-3 text-gray-300">Llamados</h2>
            <div className="space-y-3">
              {accepted.length === 0 && (
                <div className="rounded-xl border border-green-700 p-4 text-gray-400">
                  Aún no se llamaron turnos.
                </div>
              )}
              {accepted
                .slice(-5)
                .reverse()
                .map((t) => (
                  <div
                    key={t.id}
                    className={`rounded-xl p-5 border ${
                      t.id === lastAccepted?.id
                        ? "border-green-400 bg-green-900/25"
                        : "border-gray-700"
                    }`}
                  >
                    <div className="text-3xl font-black tracking-wide">
                      {t.client_name} — {t.counter_name || "Caja 1"}
                    </div>
                    <div className="text-sm text-gray-400">
                      Aceptado — {new Date(t.accepted_at ?? t.date_iso).toLocaleTimeString("es-AR")}
                    </div>
                  </div>
                ))}
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}
